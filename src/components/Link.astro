---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"a"> & {
  href: string | { pathname: string; query?: Record<string, string> };
};

// Access the environment variables
const basePath = import.meta.env.BASE_PATH || "/";

const { href: rawHref, style, ...attrs } = Astro.props as Props;

const href = (() => {
  if (typeof rawHref === "string") {
    return rawHref;
  }
  const { pathname, query } = rawHref;
  const searchParams = new URLSearchParams(query);
  return `${pathname}?${searchParams.toString()}`;
})();

const site = Astro.site;
const { pathname } = Astro.url;

function isActiveLink(url: string): boolean {
  return url === pathname || url === "." || url === "./";
}

function isExternalLink(url: string): boolean {
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
}

function isInternalLink(url: string): boolean {
  try {
    const parsedUrl = new URL(url, site?.toString());
    return parsedUrl.origin === site?.origin;
  } catch {
    return false;
  }
}

const isExternal = isExternalLink(href);
const isInternal = isInternalLink(href);
const isActive = isActiveLink(href);

// Prepend the base path to internal links
const formattedHref = isInternal && !href.startsWith(basePath) ? `${basePath}${href}` : href;

let relAttribute: object = {};
let targetAttribute: object = {};
let styleAttribute: object = {};

if (isExternal) {
  relAttribute = { rel: "external noreferrer" };
  // rel 'noopener' is implicit with target '_blank' - https://www.stefanjudis.com/today-i-learned/target-blank-implies-rel-noopener/
  targetAttribute = { target: "_blank" }
} else if (!isInternal && isActive) {
  relAttribute = {};
  styleAttribute = { style: "color: red;" };
}
---

<a href={formattedHref} {...styleAttribute} {...relAttribute} {...attrs} {...targetAttribute}>
  <slot />
</a>